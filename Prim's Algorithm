///In: An adjacency matrix and a start vertex
///Out: A adjacency matrix for a minimum spanning tree
///This is ineffiecent as the code does not remove vertices
//from the queue. It rechecks them all.

package prim.s;

import java.io.File; 
import java.util.Scanner; 
import java.io.*;
import static oracle.jrockit.jfr.events.Bits.intValue;
public class PrimS {
 public static void printArray(int[] array)
    {
        int n = array.length;
        for (int i=0; i<n; i++)
            System.out.print(array[i]+" ");
            System.out.println();
    }
 
       public static void print2dArray(int[][] array)
    {
        int n = array.length;
        for(int j=0;j<n;j++){
        for (int i=0; i<n; i++){
            System.out.print(array[i][j]+" ");   
        }
        System.out.println();
        }
    }
       
               //Inputs an string of integers and makes an array or integers.
 public static int[] makeArray(String d){
 
     int a[] = new int[d.length()];
     
     String[] splitup = d.split("");
     
     
     for (int i=0;i<splitup.length;i++) {
    a[i] = Integer.valueOf(splitup[i]); 
     
  } 
 
 return a;
 }
 //int vector returns true if the vector is all 1's else false
 public static boolean allOnes(int[] v){
 boolean w=false;
 int m=0;
 
 for(int i=0;i<v.length;i++){
 m=m+v[i];
 }
 if(m==v.length){w=true;}
 else{w=false;}
 return w;
 }
 //in:adjacency matrix, a vector of rows and a vector of visited
//out: vector (mindistance, row, column)
 public static int[] minDistance(int[][] b,int[] L,int[] v){
     
     int m=999999;
     int r=0;
     int k=0;
     int[] p=new int[3];
 
     for(int i=0;i<L.length;i++){
     
         for(int j=0;j<b.length;j++){
             if(b[L[i]][j]<m && b[L[i]][j]!=0 && v[j]==0){
                 m=b[L[i]][j]; r=L[i];k=j; 
             }
         
         
         
         }
     
     }
     p[0]=m;
     p[1]=r;
     p[2]=k;
    return p;
 }
 
    public static int[] addStack(int[] a, int c) {
        
        boolean s=false;
        
        for(int i=0;i<a.length;i++){
        
        if(a[i]==c){s=true;}
        
        
        }
        
        if(s==false){
    
    int[] b= new int[a.length+1];
    
    for(int i=0;i<a.length;i++){
        
        
        b[i]=a[i];
        
        }
                
        b[a.length]=c;
    
    
    return b;
        }
        else{return a;}
    }
//////////////////// main frame ////////////////////////////////////
    public static void main(String[] args)  throws Exception{
        File file = new File("C:\\Users\\bamcc\\Desktop\\232\\Lab 3\\graph2.txt");
        BufferedReader br = new BufferedReader(new FileReader(file)); 
         String Line; 
         
         Line=br.readLine();
          int a[] = makeArray(Line);
          
         printArray(a);
         double r=Math.sqrt(a.length);
    
         int d=intValue(r); 
    
         int[][] b=new int[d][d];
         
         //load up the matrix
        for(int i=0;i<a.length;i++){
    
            int k=intValue(i/d);
            b[k][i%d]=a[i];
        }
        /////////////////////////////////////////////////////////////////////////////
        int v[]=new int[d];
        v[0]=1;
        int L[]=new int[1];
        int x =0;
        int y=0;
        int z=0;
        L[0]=0;
        int t[][]=new int[b.length][b.length];
        
        
     print2dArray(b);
         printArray(L);
         printArray(minDistance(b,L,v));
         
         System.out.println(allOnes(L));
         ///////////////Let's do this///////////
         
         while(allOnes(v)==false){
         x=minDistance(b,L,v)[0]; y=minDistance(b,L,v)[1]; z=minDistance(b,L,v)[2];
         
         t[y][z]=x;t[z][y]=x;
         v[z]=1;
         L=addStack(L,z);
         
         }
         ////endwhile!
         
         print2dArray(t);
    }
    
    
    
}
