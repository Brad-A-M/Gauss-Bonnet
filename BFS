 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package readit;

import java.io.*;
import static oracle.jrockit.jfr.events.Bits.intValue;
import java.util.Stack;
public class BFS {
    public static void print2dArray(int[][] array)
    {
        int n = array.length;
        for(int j=0;j<n;j++){
        for (int i=0; i<n; i++){
            System.out.print(array[i][j]+" ");   
        }
        System.out.println();
        }
    }
      public static void printArray(int[] array)
    {
        int n = array.length;
        for (int i=0; i<n; i++)
            System.out.print(array[i]+" ");
            System.out.println();
    }

        //Inputs an string of integers and makes an array or integers.
 public static int[] makeArray(String d){
 
     int a[] = new int[d.length()];
     
     String[] splitup = d.split("");
     
     
     for (int i=0;i<splitup.length;i++) {
        a[i] = Integer.parseInt(splitup[i]); 
     
      } 
 
 return a;
 }
 
 //adds a value to the top of an array 
 //if the value is already there do not add it!
    public static int[] addQueue(int[] a, int c){
        
        boolean s=false;
        
        for(int i=0;i<a.length;i++){
        
        if(a[i]==c){s=true;}
        
        
        }
        
        if(s==false){
    
    int[] b= new int[a.length+1];
    
    for(int i=0;i<a.length;i++){
        
        
        b[i]=a[i];
        
        }
                
        b[a.length]=c;
    
    
    return b;
        }
        else{return a;}
    }
 //takes the first number off a array
    public static int[] deleteQ(int[] a){
    
    int[] b = new int[a.length-1];
    
        for(int i=1;i<a.length;i++){
            
        
                b[i-1]=a[i];
            }
       
        
    return b;
    }
    //takes the last number off a array
    public static int[] deleteS(int[] a){
    
    int[] b = new int[a.length-1];
    
        for(int i=1;i<a.length-1;i++){
            
        
                b[i]=a[i];
            }
       
        
    return b;
    }
    //BFS read in a matrix return vector of minimum distances
    public static int[] BFS(int[][] b){
    
    int d = b.length;
    int[] v=new int[d];//v records visited
    int[] f=new int[d];//f records how far
    v[0]=1;
    int[] Q=new int[1];
    Q[0]=0;
    int k=1;
    
    for(int i=1;i<d;i++){
    
            if(b[0][i]!=0){
        
            v[i]=1;
            f[i]=b[0][i];
            Q=addQueue(Q,i);
        
            }
       
        }
       Q=deleteQ(Q);
       
       
      //while the queue is not empty 
    while(Q.length!=0){
    
         for(int i=k;i<d;i++){
    
            if(b[Q[0]][i]!=0){
                //if we alrady visited don't add to the queue
                if(v[i]==0){
            
                    Q=addQueue(Q,i);
                }
       
            v[i]=1;
            //if we haven't visited add on how far plus how far we already are
            if(f[i]==0){f[i]=b[Q[0]][i]+f[Q[0]];}
       else{
                //take the smaller of how far verses how far taking the long way
            f[i]=Math.min((b[Q[0]][i]+f[Q[0]]),f[i]);}
        
            }
       
        }
       Q=deleteQ(Q);
       k=k+1;
       
    }
    
    return f;
    
    
    
    }//end bfs
    
    public static void main(String[] args) throws Exception{
        File file = new File("C:\\Users\\bamcc\\Desktop\\232\\Lab 3\\graph2.txt");
    
    BufferedReader br = new BufferedReader(new FileReader(file));
    
    
    /*
    String st; 
    
  while ((st = br.readLine()) != null) 
    System.out.println(st);  
    
    */
    String Line; 
    
    Line=br.readLine();
    
    // print read in    System.out.println(Line); 
    
    
    
    int a[] = makeArray(Line);
    
    
    printArray(a);
    double r=Math.sqrt(a.length);
    
    int d=intValue(r); 
    
    int[][] b=new int[d][d];
    //load up the matrix
    for(int i=0;i<a.length;i++){
    
        int k=intValue(i/d);
    b[k][i%d]=a[i];
    }
    
    
    /*
    //BFS
    
    int[] v=new int[d];//v records visited
    int[] f=new int[d];//f records how far
    v[0]=1;
    int[] Q=new int[1];
    Q[0]=0;
    int k=1;
    
    //go throught first row
    
    for(int i=1;i<d;i++){
    
            if(b[0][i]!=0){
        
            v[i]=1;
            f[i]=b[0][i];
            Q=addQueue(Q,i);
        
            }
       
        }
       Q=deleteQ(Q);
       
       
      //while the queue is not empty 
    while(Q.length!=0){
    
         for(int i=k;i<d;i++){
    
            if(b[Q[0]][i]!=0){
                //if we alrady visited don't add to the queue
                if(v[i]==0){
            
                    Q=addQueue(Q,i);
                }
       
            v[i]=1;
            //if we haven't visited add on how far plus how far we already are
            if(f[i]==0){f[i]=b[Q[0]][i]+f[Q[0]];}
       else{
                //take the smaller of how far verses how far taking the long way
            f[i]=Math.min((b[Q[0]][i]+f[Q[0]]),f[i]);}
        
            }
       
        }
       Q=deleteQ(Q);
       k=k+1;
       
    }

       printArray(v);
       printArray(f);
       System.out.println(Q.length);

*/
       printArray(BFS(b));
       print2dArray(b);
       
       
       int[][] t=new int[d][d];//matrix that is the spanning tree
       int[] v=new int[d];//visited or not
       v[0]=1;
       Stack<Integer> st;
       st=new Stack<Integer>();
       
       st.push(0);
       int n=0;
       int[] p=new int[d];//predecessor, where you came from
       p[0]=99;
       
      
       
       while(!st.isEmpty()){
           
           
           
           n=st.pop();
           
           int[] h=neighbors(b,n);
           
           for(int i=0;i<h.length;i++){
               int l=h[i];
                if(v[l]==0){
                     st.push(l);
                     v[l]=1;
                     t[l][n]=b[n][l];
                     
             
         break;
            }
       
       }
      
       
       }
       
       
       
       
       
       
      
       
       
       
       System.out.println(n);
       printArray(neighbors(b,0));
      
       System.out.println(1);
       print2dArray(t);
       printArray(v);
       
       
    }
    //input matrix and vertex out array of vertices that share a edge
    public static int[] neighbors(int[][] b, int n){
    
    int[] g = new int[0];
    
        for(int i=0;i<b.length;i++){
            
            if(b[n][i]!=0){
                g=addQueue(g,i);
            }
       
        }
    return g;
    } 
    
}
