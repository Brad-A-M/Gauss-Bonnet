/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dfs;

import java.io.File; 
import java.util.Scanner; 
import java.io.*;
import static oracle.jrockit.jfr.events.Bits.intValue;

public class DFS {
    
     public static void printArray(int[] array)
    {
        int n = array.length;
        for (int i=0; i<n; i++)
            System.out.print(array[i]+" ");
            System.out.println();
    }
     
      public static void print2dArray(int[][] array)
    {
        int n = array.length;
        for(int j=0;j<n;j++){
        for (int i=0; i<n; i++){
            System.out.print(array[i][j]+" ");   
        }
        System.out.println();
        }
    }

         //Inputs an string of integers and makes an array or integers.
 public static int[] makeArray(String d){
 
     int a[] = new int[d.length()];
     
     String[] splitup = d.split("");
     
     
     for (int i=0;i<splitup.length;i++) {
    a[i] = Integer.valueOf(splitup[i]); 
     
  } 
 
 return a;
 }
 
    //takes the last number off a array
    public static int[] deleteS(int[] a){
    
    int[] b = new int[a.length-1];
    
        for(int i=1;i<a.length-1;i++){
            
        
                b[i]=a[i];
            }
       
        
    return b;
    }
    
    //adds a value to the top of an array 
 //if the value is already there do not add it!
    public static int[] addStack(int[] a, int c){
        
        boolean s=false;
        
        for(int i=0;i<a.length;i++){
        
        if(a[i]==c){s=true;}
        
        
        }
        
        if(s==false){
    
    int[] b= new int[a.length+1];
    
    for(int i=0;i<a.length;i++){
        
        
        b[i]=a[i];
        
        }
                
        b[a.length]=c;
    
    
    return b;
        }
        else{return a;}
    }
    //Input matrix, vector of visited, and a vertex (integer)
    //return the unvisited vertex with minimal weight
    //returns 0 if there isn't one unvisited
     public static int[] nextVertex(int[][] b, int[] v, int c){
         
         int m=999;//record minimum distance
         int d =0;//index where min is
         for(int i=0;i<b.length;i++){
             if(b[c][i]>0 && b[c][i]<=m && v[i]==0){
              m=b[c][i]; d=i;
         
            }
         
         }
     if(m==999){m=0;}
     
     int[]r=new int[2];
     //for(int i=2;i<b.length;i++){r[i]=v[i-2];}
     r[0]=d;
     r[1]=m;
     
     
     return r;
     
     }
 //The main!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    public static void main(String[] args) throws Exception{
        
        File file = new File("C:\\Users\\bamcc\\Desktop\\232\\Lab 3\\graph2.txt");
    
    BufferedReader br = new BufferedReader(new FileReader(file)); 
         String Line; 
    
    Line=br.readLine();
          int a[] = makeArray(Line);
    
    
    printArray(a);
    double r=Math.sqrt(a.length);
    
    int d=intValue(r); 
    
    int[][] b=new int[d][d];
    //load up the matrix
    for(int i=0;i<a.length;i++){
    
        int k=intValue(i/d);
    b[k][i%d]=a[i];
    }
     print2dArray(b);   
        
     
     int[] v=new int[d];
     v[0]=1;
     int[] S=new int[1];
     S[0]=0;
     int[] W=new int[1];
     W[0]=0;
     
     int n=0;
    
 
     while(nextVertex(b,v,n)[0]!=0){
         
         
         n=nextVertex(b,v,n)[0];
         v[n]=1;
         S=addStack(S,n);
         W=addStack(W,n);
     
     }
     
     while(S.length!=0){
         n=S[S.length-1];
         S=deleteS(S);
         
         while(nextVertex(b,v,n)[0]!=0){
         
         
         n=nextVertex(b,v,n)[0];
         v[n]=1;
         S=addStack(S,n);
         W=addStack(W,n);
     
     }
     
     }

     printArray(v);
     printArray(W);
     int[][] t=new int[d][d];
     
     for(int i=0;i<W.length-1;i++){
     t[W[i+1]][W[i]]=1;
     }
     
     print2dArray(t);
    }//ender
    
}
